stages:
  - build
  - deploy

# 编译阶段
build_job:
  stage: build
  image: golang:latest  # 使用官方 Go 镜像
  script:
    - echo "Building Go project..."
    - go build -o file_server ./  # 编译生成 file_server
  artifacts:
    paths:
      - file_server  # 保存编译好的二进制文件供后续使用
    expire_in: 1 hour  # artifacts 保留 1 小时

# 部署阶段
deploy_job:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | cat -A   # 先看一下到底拿到的是什么（仅测试阶段，不要在生产里直接打印私钥）
    - echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_ed25519
    - cat -A ~/.ssh/id_ed25519          # 再看一下最终写入文件里是什么
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan -H 38.174.113.217 >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to server..."
    - scp -i ~/.ssh/id_ed25519 file_server root@38.174.113.217:/root/file_server/file_server
    - |
      ssh -i ~/.ssh/id_ed25519 root@38.174.113.217 << 'EOF'
        cd /root/file_server
        pkill -f "file_server -auth" || true
        nohup ./file_server -auth :1132:1132 -http 80 -https 443 \
             -ssl-key ../tls/cert.key -ssl-cert ../tls/cert.pem &
        exit
      EOF

  only:
    - master  # 只有 master 分支的提交才会触发部署